name: Build and Deploy

on:
  push:
    branches: [main]
    paths: ['src/**']
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          CHANGED_SERVICES=()
          
          echo "🔍 Checking for changes in services..."
          
          # Check for changes in each service
          for service in "${SERVICES[@]}"; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^src/$service/" || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              CHANGED_SERVICES+=("$service")
              echo "✅ Changes detected in: $service"
            else
              echo "⏭️ No changes in: $service"
            fi
          done
          
          # If manual trigger, build all services
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔄 Manual trigger - building all services"
            CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          fi
          
          # Check if we have any changes
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "changed-services=" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected in any services"
          else
            # Create matrix for parallel jobs
            MATRIX_JSON=$(printf '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s 'map({service: .})')
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":$MATRIX_JSON}" >> $GITHUB_OUTPUT
            echo "changed-services=${CHANGED_SERVICES[*]}" >> $GITHUB_OUTPUT
            echo "🚀 Will process services: ${CHANGED_SERVICES[*]}"
          fi

  build-and-push:
    name: Build & Push ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: retail-store-${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          SERVICE="${{ matrix.service }}"
          SHORT_TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          
          echo "🏗️ Building ${SERVICE} service..."
          echo "📦 Repository: $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "🏷️ Tags: $IMAGE_TAG, $SHORT_TAG, latest"
          
          # Create ECR repository if it doesn't exist
          echo "🔍 Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY 2>/dev/null || {
            echo "📝 Creating ECR repository: $ECR_REPOSITORY"
            aws ecr create-repository --repository-name $ECR_REPOSITORY
          }
          
          # Build Docker image
          echo "🔨 Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src/$SERVICE/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_TAG src/$SERVICE/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest src/$SERVICE/
          
          # Push images
          echo "📤 Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "✅ Successfully built and pushed ${SERVICE}"
          echo "🔗 Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_TAG"

      - name: Update Helm values for ${{ matrix.service }}
        env:
          SERVICE: ${{ matrix.service }}
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          IMAGE_URI="${ECR_REGISTRY}/retail-store-${SERVICE}"
          
          echo "📝 Updating Helm values for ${SERVICE}..."
          echo "📄 File: $VALUES_FILE"
          echo "🏷️ New tag: $TAG"
          echo "🖼️ Image: $IMAGE_URI"
          
          if [ ! -f "$VALUES_FILE" ]; then
            echo "❌ Values file not found: $VALUES_FILE"
            exit 1
          fi
          
          # Backup original file
          cp "$VALUES_FILE" "${VALUES_FILE}.backup"
          
          # Update image repository and tag
          if grep -q "repository:" "$VALUES_FILE"; then
            sed -i "s|repository:.*|repository: \"$IMAGE_URI\"|" "$VALUES_FILE"
            echo "✅ Updated repository to: $IMAGE_URI"
          fi
          
          if grep -q "tag:" "$VALUES_FILE"; then
            sed -i "s/tag:.*/tag: \"$TAG\"/" "$VALUES_FILE"
            echo "✅ Updated tag to: $TAG"
          fi
          
          # Verify changes
          echo "📋 Updated values.yaml content:"
          cat "$VALUES_FILE"
          
          # Check if update was successful
          if ! grep -q "$TAG" "$VALUES_FILE"; then
            echo "❌ Update failed - restoring backup"
            mv "${VALUES_FILE}.backup" "${VALUES_FILE}"
            exit 1
          fi
          
          # Remove backup
          rm "${VALUES_FILE}.backup"
          echo "✅ Helm values updated successfully"

      - name: Commit and push Helm changes to main
        env:
          SERVICE: ${{ matrix.service }}
        run: |
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          
          git config --local user.email "gitops@github.com"
          git config --local user.name "GitOps Bot"
          
          # Check if there are changes to commit
          if ! git diff --quiet "src/${SERVICE}/chart/values.yaml"; then
            echo "📝 Committing Helm changes for ${SERVICE}..."
            
            git add "src/${SERVICE}/chart/values.yaml"
            git commit -m "🚀 Update ${SERVICE} Helm chart to ${TAG}

- ECR Repository: retail-store-${SERVICE}
- Image Tag: ${TAG}
- Full SHA: ${{ github.sha }}
- Triggered by: ${{ github.actor }}"
            
            # Push with retry logic to main branch
            for i in {1..3}; do
              echo "📤 Pushing changes to main branch (attempt $i/3)..."
              if git push origin main; then
                echo "✅ Successfully pushed Helm update for ${SERVICE} to main"
                break
              else
                echo "⚠️ Push failed for ${SERVICE}, attempt $i/3. Retrying..."
                git pull --rebase origin main
                sleep 2
              fi
              
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push ${SERVICE} after 3 attempts"
                exit 1
              fi
            done
          else
            echo "📝 No Helm changes to commit for ${SERVICE}"
          fi

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
            echo "## ✅ Successfully Processed Services" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            IFS=' ' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
            for service in "${SERVICES[@]}"; do
              echo "- **${service}**: Built and pushed to ECR, Helm values updated" >> $GITHUB_STEP_SUMMARY
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📦 Deployment Details" >> $GITHUB_STEP_SUMMARY
            echo "- **ECR Registry**: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_STEP_SUMMARY
            echo "- **Image Tag**: $(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- ArgoCD will automatically sync the updated Helm charts" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor deployment status in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
            echo "- Verify application health in Kubernetes cluster" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changes were detected in the service source code." >> $GITHUB_STEP_SUMMARY
            echo "Deployment was skipped." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by GitOps workflow on $(date)*" >> $GITHUB_STEP_SUMMARY
